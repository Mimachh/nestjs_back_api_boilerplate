
model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  emailVerified         DateTime?
  firstName             String?
  lastName              String?
  pseudo                String?
  password              String
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  roles                 UserRole[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  profile               Profile? 
}

model Role {
  id    String     @id @default(cuid())
  name  String     @unique
  slug  String     @unique
  users UserRole[]
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Profile {
  id Int @id @default(autoincrement())
  bio String?
  avatar String?
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  address Address?
}

model Address {
  id Int @id @default(autoincrement())
  street String
  city String
  zip String
  country String?
  // TODO
  // add the geo gouv api
  profileId Int @unique
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

